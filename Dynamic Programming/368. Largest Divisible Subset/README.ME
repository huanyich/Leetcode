Intuition
When dealing with a larger value V, if there is a value A such that V is divisible by A (V % A == 0), it follows that any value 'a' satisfying A % a == 0 will also satisfy V % a == 0.
Therefore, sorting the array is an option.

Approach
To determine the longest subset for each index i, we iterate through the smaller indices j and check if nums[i] is divisible by nums[j]. If it is, we update dp[i] as the maximum value between dp[i] and dp[j] + 1. To record these values, we utilize an array named 'subset', where subset[i] denotes the longest subset that includes index i.

Complexity
Time complexity: O(n^2)
Space complexity:O(n)


Code
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> dp(n);
        vector<vector<int>> subset(n);
        vector<int> res;
        for(int i=0; i<n; i++){
            subset[i].push_back(nums[i]);
            res = subset[i];
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<i; j++){
                if(nums[i]%nums[j]!=0) continue;
                int next = dp[j]+1;
                if(next>dp[i]){
                    auto newSubset = subset[j];
                    newSubset.push_back(nums[i]);
                    subset[i] = newSubset;
                    if(res.size()<newSubset.size()){
                        res = newSubset;
                    }
                    dp[i] = next;
                }
            }
        }
        return res;
    }
};
/*
 


*/
